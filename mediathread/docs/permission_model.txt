This document describes how MediaThread manages permissions of objects in the system.

Generally, Django comes with its own authorization management.  This model breaks up
users into:

1. SuperUsers -- accounts with access to all objects through the Django ADMIN interface.
2. Staff -- accounts with access to the Django ADMIN interface
   -- what they have access to read/add/change/delete depends on the groups
      they have been added to, and the permissions granted to the groups.
3. Other users -- these users (generally students/instructors) do not have access to
   the ADMIN interface at all.

On top of this layer, MediaThread, leverages Django's authorization a little, and
then has its own.  Two Django apps mediate access:

I. CourseAffils
   Each course has two groups associated with it.  
   A general Member group, and a Faculty group.

   People in the Member group (and people marked as Django staff) have access to        
   enter a particular course.  Staff can enter a course that they are not a member of,
   but cannot create objects (annotations/assets/etc) in the course

   Members of the course faculty group are granted permissions based on 
     their membership of that group.  The permissions in the Django interface
     are NOT considered (except in the Admin interface, and then only if the
     faculty member is also marked as staff).

   This is subject to change, but at the time of this writing, faculty have the
   following increased privileges:
   1. Add archives to the Explore Collections page
   2. Create Course-level discussions         
   3. Publish projects which appear in the 'instructor focus' 
      section on the course home page
   4. Create a 'feedback' discussion thread for a project
   5. View previous revisions of published projects they have 
      access to (see below in Collaborations)
   6. View the "Instructor's Class Report" summary page
   7. Edit any comment (including those posted by others) in a discussion.
      (this allows them to semi-censor/'delete' a 
       post by deleting the content of a comment)

II. Collaborations
    This section will be more technical, but describes the underlying structure of
    how access to items is managed at the programmatic-level.  Django 1.2+ seems
    to finally have a core-framework (if not an implementation) of how to do
    object-level access.  I'm not sure it will actually work for our use-case, but
    regardless, the structuredcollaboration django app was developed before this
    framework existed.  Maybe sometime in the future we can migrate it towards
    Django's core plan, better.  But in the meantime, this is how Collaborations work:

    Each Collaboration has a:
       * context: a pointer to an ancestor collaboration object
       * parent: an optional pointer to a direct parent collaboration object
       * content_object: a pointer to another object in the system 
                         (often not a collaboration)
       * permission policy: this policy determines whether a particular
                            (http) request object (which includes the user and course)
                            has access to do a certain thing with the object.
                            The expected actions are 'read','edit','delete',
                                                     'manage',
                                                     'add_child'
                            there is a DEFAULT policy for the entire site (see below in Discusions)
       * optional user and group pointers 
          (which can be used in the permission policy)
       * a local ordering (with respect to the parent)

    
    MediaThread currently uses this very-generic structure in the following ways:
    
    1. Each Course has a corresponding Collaboration object, and all Collaboration
       objects in the course have the Course set to the Collaboration context.
       (see courseaffils/middleware.py for where the collaboration auto-created)

    2. Projects: each project also auto-creates a collaboration object.
       At the moment, projects have legacy permissioning/grouping with the fields
       'participants' and 'submitted'.  The current code, redundantly updates
       both of these.  In the future, we will probably abandon the 'participants'
       field (unless it stays a useful quick index)

       The collaboration permissions policy is set by its authors, with four options:
       * private to themselves
       * private to themselves and the instructor
       * protected to class-members (semi-published)
       * published to the world

       Note that this Collaboration policy structure makes it easy, not only to
       restrict access to objects, but to increase access beyond the class.

    3. Discussions: This is a little complicated, because Comments also 
       want to point to a single object, even more important for Threaded comments,
       so this is the pointer structure:

       At the moment, if you have permission to 'read' on the 
         Collaboration(for discussion) you can add a comment.

    ThreadedComment(top comment)
        ^    content_object ------->  Collaboration(for discussion)
        |                                  context -------> Collaboration(for Course)
        |                                  parent  -------> Collaboration(for OBJECT)
        ---------------------------------- content_object

        Comment(child)
            content_object -----> Collaboration(for discussion)
            parent ----> ThreadedComment(top comment)


       At the moment, the user interface supports:
         * an instructor creating a new Discussion
         * the instructor creating a Discussion for a Project (to give feedback)
         Each of these has different setups:

       Course-level Discussion:
           OBJECT is the Course
           user = NULL
           policy is NULL (which means the default:
               InstructorManaged:
                  read: all class members
                  edit: all class members
                  manage: collaboration.user or faculty
                  delete: collaboration.user or faculty
                  add_child: FALSE
               )

       Project feedback Discussion:
           OBJECT is Project
           user = project's collaboration.user
           group= project's collaboration.group
           policy is PrivateStudentAndFaculty:
              read: course faculty or collaboration.user or collaboration.group 
              edit: (same as read)
              add_child: (same as read)
              manage: course faculty
           )
